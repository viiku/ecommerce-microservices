Task 1:- Implement a simple spring boot project which receives various HTTP methods
Task 2:- Adding multiple dependencies
Task 4:- Configuring API Gateway
Task 5:- Configuring Eureka server for microservice
Task 6:- Configuring Axon server for product microservice
Task 7:- Implement Lookup DB table for record validation
Task 8:- Implement central error handler class
Task 9:- Custom error message in JSON format, execution should stop when there is an exception in
aggregate class
Task 10:- Handling events on event side
Task 11:- Implement Rollback if any exception logs
Task 12:- Creating order Saga class
Task 13:- Include a new microservice called product microservice
Task 14:- createProductEvent should emit events to ProductAggregate class
Task 15:- Handling Events in query events handler to maintain consistency in Read database
Task 16:- Implement query controller class and model for handling queries
Task 17:- Implement query handler and product entity to retrieve data from database
Task 18:- Implement Bean validation for product microservice
Task 19:- Added command message interceptor for intercepting incoming messages for validation before routing to command handler
Task 20:- Added Lookup tables, events handler the command interceptor for set based consistency validation
Task 21:- Centralized Error handler for any exceptions coming
Task 22:- Error messages in JSON format, intercepting any exception in aggregate command handler
Task 23:- Custom error handler and exceptions propagate up to stack
Task 24:- Saga Implementation for order microservice, introduced a new core module, which will have common for microservices
Task 25:- Handle ProductCreatedEvent and OrderCreatedEvent
Task 26:- Introduced a new microservice called UserService for creating orders, fetching data from different microservice running on different ports, handling events
Task 27:- Introduced a new microservice called PaymentService for payment related stuffs